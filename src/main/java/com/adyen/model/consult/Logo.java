/*
 * Payment API
 *
 * The version of the OpenAPI document: 1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.adyen.model.consult;

//model

import java.util.Objects;
import java.util.Arrays;
import java.util.Map;
import java.util.HashMap;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.core.JsonProcessingException;


/**
 * Logo
 */
@JsonPropertyOrder({
  Logo.JSON_PROPERTY_LOGO_NAME,
  Logo.JSON_PROPERTY_LOGO_URL
})
//pojo

public class Logo {
  public static final String JSON_PROPERTY_LOGO_NAME = "logoName";
  private String logoName;

  public static final String JSON_PROPERTY_LOGO_URL = "logoUrl";
  private String logoUrl;

  public Logo() { 
  }

  /**
   * The logo name of the card brand. See the Card brand list to check the valid values.
   *
   * @param logoName
   * @return the current {@code Logo} instance, allowing for method chaining
   */
  public Logo logoName(String logoName) {
    this.logoName = logoName;
    return this;
  }

  /**
   * The logo name of the card brand. See the Card brand list to check the valid values.
   * @return logoName
   */
  @ApiModelProperty(value = "The logo name of the card brand. See the Card brand list to check the valid values.")
  @JsonProperty(JSON_PROPERTY_LOGO_NAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public String getLogoName() {
    return logoName;
  }

  /**
   * The logo name of the card brand. See the Card brand list to check the valid values.
   *
   * @param logoName
   */ 
  @JsonProperty(JSON_PROPERTY_LOGO_NAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setLogoName(String logoName) {
    this.logoName = logoName;
  }

  /**
   * The logo URL of the card brand.
   *
   * @param logoUrl
   * @return the current {@code Logo} instance, allowing for method chaining
   */
  public Logo logoUrl(String logoUrl) {
    this.logoUrl = logoUrl;
    return this;
  }

  /**
   * The logo URL of the card brand.
   * @return logoUrl
   */
  @ApiModelProperty(value = "The logo URL of the card brand.")
  @JsonProperty(JSON_PROPERTY_LOGO_URL)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public String getLogoUrl() {
    return logoUrl;
  }

  /**
   * The logo URL of the card brand.
   *
   * @param logoUrl
   */ 
  @JsonProperty(JSON_PROPERTY_LOGO_URL)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setLogoUrl(String logoUrl) {
    this.logoUrl = logoUrl;
  }

  /**
   * Return true if this Logo object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Logo logo = (Logo) o;
    return Objects.equals(this.logoName, logo.logoName) &&
        Objects.equals(this.logoUrl, logo.logoUrl);
  }

  @Override
  public int hashCode() {
    return Objects.hash(logoName, logoUrl);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Logo {\n");
    sb.append("    logoName: ").append(toIndentedString(logoName)).append("\n");
    sb.append("    logoUrl: ").append(toIndentedString(logoUrl)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

/**
   * Create an instance of Logo given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Logo
   * @throws JsonProcessingException if the JSON string is invalid with respect to Logo
   */
  public static Logo fromJson(String jsonString) throws JsonProcessingException {
    return JSON.getMapper().readValue(jsonString, Logo.class);
  }
/**
  * Convert an instance of Logo to an JSON string
  *
  * @return JSON string
  */
  public String toJson() throws JsonProcessingException {
    return JSON.getMapper().writeValueAsString(this);
  }
}
