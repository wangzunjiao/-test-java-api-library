/*
 * Payment API
 *
 * The version of the OpenAPI document: 1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.adyen.model.consult;

//model

import java.util.Objects;
import java.util.Arrays;
import java.util.Map;
import java.util.HashMap;
import com.adyen.model.consult.Amount;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.core.JsonProcessingException;


/**
 * Plan
 */
@JsonPropertyOrder({
  Plan.JSON_PROPERTY_INTEREST_RATE,
  Plan.JSON_PROPERTY_MIN_INSTALLMENT_AMOUNT,
  Plan.JSON_PROPERTY_MAX_INSTALLMENT_AMOUNT,
  Plan.JSON_PROPERTY_INSTALLMENT_NUM,
  Plan.JSON_PROPERTY_INTERVAL,
  Plan.JSON_PROPERTY_ENABLED
})
//pojo

public class Plan {
  public static final String JSON_PROPERTY_INTEREST_RATE = "interestRate";
  private String interestRate;

  public static final String JSON_PROPERTY_MIN_INSTALLMENT_AMOUNT = "minInstallmentAmount";
  private Amount minInstallmentAmount;

  public static final String JSON_PROPERTY_MAX_INSTALLMENT_AMOUNT = "maxInstallmentAmount";
  private Amount maxInstallmentAmount;

  public static final String JSON_PROPERTY_INSTALLMENT_NUM = "installmentNum";
  private Integer installmentNum;

  /**
   * The interval of each installment payment. The valid value is MONTH.
   */
  public enum IntervalEnum {
    MONTH("MONTH");

    private String value;

    IntervalEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static IntervalEnum fromValue(String value) {
      for (IntervalEnum b : IntervalEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_INTERVAL = "interval";
  private IntervalEnum interval;

  public static final String JSON_PROPERTY_ENABLED = "enabled";
  private Boolean enabled;

  public Plan() { 
  }

  /**
   * The interest rate the customer is charged on the installments.
   *
   * @param interestRate
   * @return the current {@code Plan} instance, allowing for method chaining
   */
  public Plan interestRate(String interestRate) {
    this.interestRate = interestRate;
    return this;
  }

  /**
   * The interest rate the customer is charged on the installments.
   * @return interestRate
   */
  @ApiModelProperty(value = "The interest rate the customer is charged on the installments.")
  @JsonProperty(JSON_PROPERTY_INTEREST_RATE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public String getInterestRate() {
    return interestRate;
  }

  /**
   * The interest rate the customer is charged on the installments.
   *
   * @param interestRate
   */ 
  @JsonProperty(JSON_PROPERTY_INTEREST_RATE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setInterestRate(String interestRate) {
    this.interestRate = interestRate;
  }

  /**
   * minInstallmentAmount
   *
   * @param minInstallmentAmount
   * @return the current {@code Plan} instance, allowing for method chaining
   */
  public Plan minInstallmentAmount(Amount minInstallmentAmount) {
    this.minInstallmentAmount = minInstallmentAmount;
    return this;
  }

  /**
   * minInstallmentAmount
   * @return minInstallmentAmount
   */
  @ApiModelProperty(required = true, value = "")
  @JsonProperty(JSON_PROPERTY_MIN_INSTALLMENT_AMOUNT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public Amount getMinInstallmentAmount() {
    return minInstallmentAmount;
  }

  /**
   * minInstallmentAmount
   *
   * @param minInstallmentAmount
   */ 
  @JsonProperty(JSON_PROPERTY_MIN_INSTALLMENT_AMOUNT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setMinInstallmentAmount(Amount minInstallmentAmount) {
    this.minInstallmentAmount = minInstallmentAmount;
  }

  /**
   * maxInstallmentAmount
   *
   * @param maxInstallmentAmount
   * @return the current {@code Plan} instance, allowing for method chaining
   */
  public Plan maxInstallmentAmount(Amount maxInstallmentAmount) {
    this.maxInstallmentAmount = maxInstallmentAmount;
    return this;
  }

  /**
   * maxInstallmentAmount
   * @return maxInstallmentAmount
   */
  @ApiModelProperty(required = true, value = "")
  @JsonProperty(JSON_PROPERTY_MAX_INSTALLMENT_AMOUNT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public Amount getMaxInstallmentAmount() {
    return maxInstallmentAmount;
  }

  /**
   * maxInstallmentAmount
   *
   * @param maxInstallmentAmount
   */ 
  @JsonProperty(JSON_PROPERTY_MAX_INSTALLMENT_AMOUNT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setMaxInstallmentAmount(Amount maxInstallmentAmount) {
    this.maxInstallmentAmount = maxInstallmentAmount;
  }

  /**
   * The number of installment payments. The valid value is from 2 to 12.
   *
   * @param installmentNum
   * @return the current {@code Plan} instance, allowing for method chaining
   */
  public Plan installmentNum(Integer installmentNum) {
    this.installmentNum = installmentNum;
    return this;
  }

  /**
   * The number of installment payments. The valid value is from 2 to 12.
   * minimum: 2
   * maximum: 12
   * @return installmentNum
   */
  @ApiModelProperty(required = true, value = "The number of installment payments. The valid value is from 2 to 12.")
  @JsonProperty(JSON_PROPERTY_INSTALLMENT_NUM)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public Integer getInstallmentNum() {
    return installmentNum;
  }

  /**
   * The number of installment payments. The valid value is from 2 to 12.
   *
   * @param installmentNum
   */ 
  @JsonProperty(JSON_PROPERTY_INSTALLMENT_NUM)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setInstallmentNum(Integer installmentNum) {
    this.installmentNum = installmentNum;
  }

  /**
   * The interval of each installment payment. The valid value is MONTH.
   *
   * @param interval
   * @return the current {@code Plan} instance, allowing for method chaining
   */
  public Plan interval(IntervalEnum interval) {
    this.interval = interval;
    return this;
  }

  /**
   * The interval of each installment payment. The valid value is MONTH.
   * @return interval
   */
  @ApiModelProperty(value = "The interval of each installment payment. The valid value is MONTH.")
  @JsonProperty(JSON_PROPERTY_INTERVAL)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public IntervalEnum getInterval() {
    return interval;
  }

  /**
   * The interval of each installment payment. The valid value is MONTH.
   *
   * @param interval
   */ 
  @JsonProperty(JSON_PROPERTY_INTERVAL)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setInterval(IntervalEnum interval) {
    this.interval = interval;
  }

  /**
   * Indicates whether the installment payment is available.
   *
   * @param enabled
   * @return the current {@code Plan} instance, allowing for method chaining
   */
  public Plan enabled(Boolean enabled) {
    this.enabled = enabled;
    return this;
  }

  /**
   * Indicates whether the installment payment is available.
   * @return enabled
   */
  @ApiModelProperty(required = true, value = "Indicates whether the installment payment is available.")
  @JsonProperty(JSON_PROPERTY_ENABLED)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public Boolean getEnabled() {
    return enabled;
  }

  /**
   * Indicates whether the installment payment is available.
   *
   * @param enabled
   */ 
  @JsonProperty(JSON_PROPERTY_ENABLED)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setEnabled(Boolean enabled) {
    this.enabled = enabled;
  }

  /**
   * Return true if this Plan object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Plan plan = (Plan) o;
    return Objects.equals(this.interestRate, plan.interestRate) &&
        Objects.equals(this.minInstallmentAmount, plan.minInstallmentAmount) &&
        Objects.equals(this.maxInstallmentAmount, plan.maxInstallmentAmount) &&
        Objects.equals(this.installmentNum, plan.installmentNum) &&
        Objects.equals(this.interval, plan.interval) &&
        Objects.equals(this.enabled, plan.enabled);
  }

  @Override
  public int hashCode() {
    return Objects.hash(interestRate, minInstallmentAmount, maxInstallmentAmount, installmentNum, interval, enabled);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Plan {\n");
    sb.append("    interestRate: ").append(toIndentedString(interestRate)).append("\n");
    sb.append("    minInstallmentAmount: ").append(toIndentedString(minInstallmentAmount)).append("\n");
    sb.append("    maxInstallmentAmount: ").append(toIndentedString(maxInstallmentAmount)).append("\n");
    sb.append("    installmentNum: ").append(toIndentedString(installmentNum)).append("\n");
    sb.append("    interval: ").append(toIndentedString(interval)).append("\n");
    sb.append("    enabled: ").append(toIndentedString(enabled)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

/**
   * Create an instance of Plan given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Plan
   * @throws JsonProcessingException if the JSON string is invalid with respect to Plan
   */
  public static Plan fromJson(String jsonString) throws JsonProcessingException {
    return JSON.getMapper().readValue(jsonString, Plan.class);
  }
/**
  * Convert an instance of Plan to an JSON string
  *
  * @return JSON string
  */
  public String toJson() throws JsonProcessingException {
    return JSON.getMapper().writeValueAsString(this);
  }
}
