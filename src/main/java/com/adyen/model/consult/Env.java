/*
 * Payment API
 *
 * The version of the OpenAPI document: 1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.adyen.model.consult;

//model

import java.util.Objects;
import java.util.Arrays;
import java.util.Map;
import java.util.HashMap;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.core.JsonProcessingException;


/**
 * Env
 */
@JsonPropertyOrder({
  Env.JSON_PROPERTY_TERMINAL_TYPE,
  Env.JSON_PROPERTY_OS_TYPE,
  Env.JSON_PROPERTY_USER_AGENT,
  Env.JSON_PROPERTY_DEVICE_TOKEN_ID,
  Env.JSON_PROPERTY_CLIENT_IP,
  Env.JSON_PROPERTY_COOKIE_ID
})
//pojo

public class Env {
  /**
   * Terminal type used by the merchant. Valid values are:
   */
  public enum TerminalTypeEnum {
    WEB("WEB"),
    
    WAP("WAP"),
    
    APP("APP"),
    
    MINI_APP("MINI_APP");

    private String value;

    TerminalTypeEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static TerminalTypeEnum fromValue(String value) {
      for (TerminalTypeEnum b : TerminalTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_TERMINAL_TYPE = "terminalType";
  private TerminalTypeEnum terminalType;

  /**
   * Type of the operation system. Valid values are:
   */
  public enum OsTypeEnum {
    IOS("IOS"),
    
    ANDROID("ANDROID");

    private String value;

    OsTypeEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static OsTypeEnum fromValue(String value) {
      for (OsTypeEnum b : OsTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_OS_TYPE = "osType";
  private OsTypeEnum osType;

  public static final String JSON_PROPERTY_USER_AGENT = "userAgent";
  private String userAgent;

  public static final String JSON_PROPERTY_DEVICE_TOKEN_ID = "deviceTokenId";
  private String deviceTokenId;

  public static final String JSON_PROPERTY_CLIENT_IP = "clientIp";
  private String clientIp;

  public static final String JSON_PROPERTY_COOKIE_ID = "cookieId";
  private String cookieId;

  public Env() { 
  }

  /**
   * Terminal type used by the merchant. Valid values are:
   *
   * @param terminalType
   * @return the current {@code Env} instance, allowing for method chaining
   */
  public Env terminalType(TerminalTypeEnum terminalType) {
    this.terminalType = terminalType;
    return this;
  }

  /**
   * Terminal type used by the merchant. Valid values are:
   * @return terminalType
   */
  @ApiModelProperty(required = true, value = "Terminal type used by the merchant. Valid values are:")
  @JsonProperty(JSON_PROPERTY_TERMINAL_TYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public TerminalTypeEnum getTerminalType() {
    return terminalType;
  }

  /**
   * Terminal type used by the merchant. Valid values are:
   *
   * @param terminalType
   */ 
  @JsonProperty(JSON_PROPERTY_TERMINAL_TYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setTerminalType(TerminalTypeEnum terminalType) {
    this.terminalType = terminalType;
  }

  /**
   * Type of the operation system. Valid values are:
   *
   * @param osType
   * @return the current {@code Env} instance, allowing for method chaining
   */
  public Env osType(OsTypeEnum osType) {
    this.osType = osType;
    return this;
  }

  /**
   * Type of the operation system. Valid values are:
   * @return osType
   */
  @ApiModelProperty(value = "Type of the operation system. Valid values are:")
  @JsonProperty(JSON_PROPERTY_OS_TYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public OsTypeEnum getOsType() {
    return osType;
  }

  /**
   * Type of the operation system. Valid values are:
   *
   * @param osType
   */ 
  @JsonProperty(JSON_PROPERTY_OS_TYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setOsType(OsTypeEnum osType) {
    this.osType = osType;
  }

  /**
   * The user agent.
   *
   * @param userAgent
   * @return the current {@code Env} instance, allowing for method chaining
   */
  public Env userAgent(String userAgent) {
    this.userAgent = userAgent;
    return this;
  }

  /**
   * The user agent.
   * @return userAgent
   */
  @ApiModelProperty(value = "The user agent.")
  @JsonProperty(JSON_PROPERTY_USER_AGENT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public String getUserAgent() {
    return userAgent;
  }

  /**
   * The user agent.
   *
   * @param userAgent
   */ 
  @JsonProperty(JSON_PROPERTY_USER_AGENT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setUserAgent(String userAgent) {
    this.userAgent = userAgent;
  }

  /**
   * Token identifier of the device.
   *
   * @param deviceTokenId
   * @return the current {@code Env} instance, allowing for method chaining
   */
  public Env deviceTokenId(String deviceTokenId) {
    this.deviceTokenId = deviceTokenId;
    return this;
  }

  /**
   * Token identifier of the device.
   * @return deviceTokenId
   */
  @ApiModelProperty(value = "Token identifier of the device.")
  @JsonProperty(JSON_PROPERTY_DEVICE_TOKEN_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public String getDeviceTokenId() {
    return deviceTokenId;
  }

  /**
   * Token identifier of the device.
   *
   * @param deviceTokenId
   */ 
  @JsonProperty(JSON_PROPERTY_DEVICE_TOKEN_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setDeviceTokenId(String deviceTokenId) {
    this.deviceTokenId = deviceTokenId;
  }

  /**
   * IP address of the client device.
   *
   * @param clientIp
   * @return the current {@code Env} instance, allowing for method chaining
   */
  public Env clientIp(String clientIp) {
    this.clientIp = clientIp;
    return this;
  }

  /**
   * IP address of the client device.
   * @return clientIp
   */
  @ApiModelProperty(value = "IP address of the client device.")
  @JsonProperty(JSON_PROPERTY_CLIENT_IP)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public String getClientIp() {
    return clientIp;
  }

  /**
   * IP address of the client device.
   *
   * @param clientIp
   */ 
  @JsonProperty(JSON_PROPERTY_CLIENT_IP)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setClientIp(String clientIp) {
    this.clientIp = clientIp;
  }

  /**
   * The cookie ID of the buyer.
   *
   * @param cookieId
   * @return the current {@code Env} instance, allowing for method chaining
   */
  public Env cookieId(String cookieId) {
    this.cookieId = cookieId;
    return this;
  }

  /**
   * The cookie ID of the buyer.
   * @return cookieId
   */
  @ApiModelProperty(value = "The cookie ID of the buyer.")
  @JsonProperty(JSON_PROPERTY_COOKIE_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public String getCookieId() {
    return cookieId;
  }

  /**
   * The cookie ID of the buyer.
   *
   * @param cookieId
   */ 
  @JsonProperty(JSON_PROPERTY_COOKIE_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setCookieId(String cookieId) {
    this.cookieId = cookieId;
  }

  /**
   * Return true if this Env object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Env env = (Env) o;
    return Objects.equals(this.terminalType, env.terminalType) &&
        Objects.equals(this.osType, env.osType) &&
        Objects.equals(this.userAgent, env.userAgent) &&
        Objects.equals(this.deviceTokenId, env.deviceTokenId) &&
        Objects.equals(this.clientIp, env.clientIp) &&
        Objects.equals(this.cookieId, env.cookieId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(terminalType, osType, userAgent, deviceTokenId, clientIp, cookieId);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Env {\n");
    sb.append("    terminalType: ").append(toIndentedString(terminalType)).append("\n");
    sb.append("    osType: ").append(toIndentedString(osType)).append("\n");
    sb.append("    userAgent: ").append(toIndentedString(userAgent)).append("\n");
    sb.append("    deviceTokenId: ").append(toIndentedString(deviceTokenId)).append("\n");
    sb.append("    clientIp: ").append(toIndentedString(clientIp)).append("\n");
    sb.append("    cookieId: ").append(toIndentedString(cookieId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

/**
   * Create an instance of Env given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Env
   * @throws JsonProcessingException if the JSON string is invalid with respect to Env
   */
  public static Env fromJson(String jsonString) throws JsonProcessingException {
    return JSON.getMapper().readValue(jsonString, Env.class);
  }
/**
  * Convert an instance of Env to an JSON string
  *
  * @return JSON string
  */
  public String toJson() throws JsonProcessingException {
    return JSON.getMapper().writeValueAsString(this);
  }
}
